// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  MEMBER
  CLIENT
}

model Role {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime   @updatedAt
  name        ROLE @unique
  user        User[]
}

model User {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime   @updatedAt
  name        String
  password    String
  roleId      String
  role        Role @relation(fields: [roleId], references: [id])
  admins      Admin[]
  clients     Client[]
  members     Member[]
}

model Admin {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User @relation(fields: [userId], references: [id])
  toppings    Topping[]
  creams      Cream[]
  products    Product[]
}

model Client {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime   @updatedAt
  userId      String
  user        User @relation(fields: [userId], references: [id])
  addressId   String @unique
  address     Address @relation(fields: [addressId], references: [id])
  members     Member[]
}

model Member {
  id            String @id @default(uuid())
  createdAt     DateTime   @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime   @updatedAt
  userId        String
  user          User @relation(fields: [userId], references: [id])
  relationship  String?
  clientId      String
  client        Client @relation(fields: [clientId], references: [id])
}

model Address {
  id            String @id @default(uuid())
  createdAt     DateTime   @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime   @updatedAt
  square        String
  house         String
  clientId      String? @unique
  client        Client?
}

model Topping {
  id            String @id @default(uuid())
  createdAt     DateTime   @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime   @updatedAt
  name          String @unique
  photo         String?
  isSpecial     Boolean @default(false)
  available     Boolean @default(false)
  price         Float
  amount        Int
  unit          String
  adminId       String
  createdBy     Admin @relation(fields: [adminId], references: [id])
}

model Cream {
  id            String @id @default(uuid())
  photo         String?
  name          String @unique
  isSpecial     Boolean @default(false)
  available     Boolean @default(false)
  price         Float
  amount        Int
  unit          String
  createdAt     DateTime   @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime   @updatedAt
  adminId       String
  createdBy     Admin @relation(fields: [adminId], references: [id])
}

model Product {
  id                  String @id @default(uuid())
  size                String @unique
  name                String?
  createdAt           DateTime   @default(now())
  photo               String?
  deletedAt           DateTime?
  updatedAt           DateTime   @updatedAt
  available           Boolean @default(false)
  price               Float
  maxCreamsAllowed    Int
  maxToppingsAllowed  Int
  adminId             String
  createdBy           Admin @relation(fields: [adminId], references: [id])
}