// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  MEMBER
  CLIENT
}

model Role {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime   @updatedAt
  name        ROLE @unique
  user        User[]
}

model User {
  id          String @id @default(uuid())
  createdAt   DateTime   @default(now())
  deletedAt   DateTime?
  updatedAt   DateTime   @updatedAt
  name        String @unique
  password    String
  roleId      String
  role        Role @relation(fields: [roleId], references: [id], onDelete: Cascade)
  adminId     String? @unique @map("adminId")
  admin       Admin?
  clientId    String? @unique
  client      Client?
  memberId    String? @unique
  member      Member?
}

model Admin {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime    @updatedAt
  email       String?
  phone       String?
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  toppings    Topping[]
  creams      Cream[]
  products    Product[]
}

model Client {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  deletedAt   DateTime?   
  updatedAt   DateTime    @updatedAt
  email       String?
  phone       String?
  userId      String      @unique
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId   String?      @unique
  address     Address?  
  members     Member[]
}

model Member {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime    @updatedAt
  email         String?
  phone         String?
  relationship  String?
  userId        String      @unique
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientId      String      
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model Address {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime    @updatedAt
  square        String
  house         String
  clientId      String      @unique
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  @@unique([house, square], name: "house_square")
}

model Topping {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime    @updatedAt
  name          String      @unique
  photo         String?
  isSpecial     Boolean     @default(false)
  available     Boolean     @default(false)
  price         Float
  amount        Int
  unit          String      @default("Unidades")
  adminId       String
  createdBy     Admin       @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Cream {
  id            String        @id @default(uuid())
  photo         String?
  name          String        @unique
  isSpecial     Boolean       @default(false)
  available     Boolean       @default(false)
  price         Float
  amount        Int
  unit          String        @default("Unidades")
  createdAt     DateTime      @default(now())
  deletedAt     DateTime?   
  updatedAt     DateTime      @updatedAt
  adminId       String
  createdBy     Admin         @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

model Product {
  id                  String      @id @default(uuid())
  size                String      @unique
  name                String?
  createdAt           DateTime    @default(now())
  photo               String?
  deletedAt           DateTime?
  updatedAt           DateTime    @updatedAt
  available           Boolean     @default(false)
  price               Float
  maxCreamsAllowed    Int
  maxToppingsAllowed  Int
  adminId             String
  createdBy           Admin       @relation(fields: [adminId], references: [id], onDelete: Cascade)
}